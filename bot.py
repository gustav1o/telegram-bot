import sqlite3
import logging
from telethon import TelegramClient, events
from datetime import datetime

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª –∏ –≤ –∫–æ–Ω—Å–æ–ª—å)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot_log.txt"),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
api_id = 28009294  
api_hash = "35518c92ad0518ab751b2192459536fe"

# üîπ ID —á–∞—Ç–æ–≤
SOURCE_CHAT = -1001575244922  # –ì—Ä—É–ø–ø–∞-–∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
DESTINATION_CHAT = "me"  # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

# üîπ ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
SPECIFIC_USER_ID = 6351715656  

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
def init_db():
    with sqlite3.connect("messages.db") as conn:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS messages (
                source_msg_id INTEGER PRIMARY KEY,
                destination_msg_id INTEGER,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        conn.commit()

# üîπ –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
def save_message(source_id, destination_id):
    with sqlite3.connect("messages.db") as conn:
        conn.execute("INSERT OR REPLACE INTO messages VALUES (?, ?, CURRENT_TIMESTAMP)", 
                     (source_id, destination_id))
        conn.commit()

def get_forwarded_message(source_id):
    with sqlite3.connect("messages.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT destination_msg_id FROM messages WHERE source_msg_id = ?", (source_id,))
        result = cursor.fetchone()
        return result[0] if result else None

def delete_message_record(source_id):
    with sqlite3.connect("messages.db") as conn:
        conn.execute("DELETE FROM messages WHERE source_msg_id = ?", (source_id,))
        conn.commit()

def clean_old_records():
    with sqlite3.connect("messages.db") as conn:
        conn.execute("DELETE FROM messages WHERE timestamp < datetime('now', '-30 days')")
        conn.commit()

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient("session_name", api_id, api_hash)

# üìå –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.NewMessage(chats=SOURCE_CHAT))
async def forward_message(event):
    try:
        if event.message.sender_id != SPECIFIC_USER_ID:
            return

        if event.message.media:
            forwarded_msg = await client.send_file(DESTINATION_CHAT, 
                                                   event.message.media, 
                                                   caption=event.message.text)
        else:
            forwarded_msg = await client.send_message(DESTINATION_CHAT, event.message.text)

        save_message(event.message.id, forwarded_msg.id)
        logging.info(f"üì© –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {event.message.id} –æ—Ç {SPECIFIC_USER_ID}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ {event.message.id}: {e}")

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.MessageEdited(chats=SOURCE_CHAT))
async def edit_message(event):
    try:
        if event.message.sender_id != SPECIFIC_USER_ID:
            return

        old_msg_id = get_forwarded_message(event.message.id)
        if old_msg_id:
            await client.delete_messages(DESTINATION_CHAT, old_msg_id)
            await client.send_message(DESTINATION_CHAT, "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")

            if event.message.media:
                new_msg = await client.send_file(DESTINATION_CHAT, 
                                                 event.message.media, 
                                                 caption=event.message.text)
            else:
                new_msg = await client.send_message(DESTINATION_CHAT, event.message.text)
            
            save_message(event.message.id, new_msg.id)
            logging.info(f"‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {event.message.id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {event.message.id}: {e}")

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.MessageDeleted(chats=SOURCE_CHAT))
async def delete_message(event):
    try:
        for deleted_id in event.deleted_ids:
            old_msg_id = get_forwarded_message(deleted_id)
            if old_msg_id:
                await client.delete_messages(DESTINATION_CHAT, old_msg_id)
                delete_message_record(deleted_id)
                await client.send_message(DESTINATION_CHAT, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ!")
                logging.info(f"üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {deleted_id} —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {deleted_id}: {e}")

# üîπ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    clean_old_records()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π

    client.start()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    client.run_until_disconnected()

